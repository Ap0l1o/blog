{"componentChunkName":"component---src-components-post-post-jsx","path":"/2019-07-02-on-signing-in-with-apple/","result":{"data":{"markdownRemark":{"html":"<p>Last month at their annual Worldwide Developers Conference (WWDC), most\ninteresting announcements was <strong>Sign in with Apple</strong>. Built to compete with\nFacebook and Google’s single-sign-on (or social sign-on, SSO) offerings,\nApple’s SSO will eschew control over the data and analytics that its\ncompetitors seek in favour of a privacy preserving design intended to advance\nApple’s pro-privacy stance and ultimately to sell more devices by bringing\nmore value to the Apple ecosystem.</p>\n<p>By itself this feels like another of Apple’s forays into the world of\ndeveloper services, where Apple Maps, MusicKit, and others appear to have had\nlimited impact. This time however could be different as Apple will be forcing\nit upon many apps and services through their AppStore requirements.</p>\n<blockquote>\n<p><strong>Sign In with Apple</strong> will be available for beta testing this summer. It\nwill be required as an option for users in apps that support third-party\nsign-in when it is commercially available later this year.</p>\n</blockquote>\n<p>Having watched the announcement and the subsequent developer talks on the\nsubject I feel that while I will enjoy using this feature as a user, as an\nengineer on a service that may need to implement it, some of the restrictions\nmay have unintended consequences that mean companies may end up providing a\nworse user experience (UX) to customers using Apple’s SSO, or may be unable to\nprovide the option at all, which could result in tricky conflicts with Apple’s\nnew requirement.</p>\n<p>After thinking about <strong>Sign in with Apple</strong> in the context of\n<a href=\"https://www.thread.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thread</a> (the product I work on) I suspect that it\nwill end up being a blunt tool, where the design and policy choices made to\nenhance privacy end up restricting the user experience with no privacy gain.\nThe opinion that Apple seem to be pushing with their SSO service is that data\nsharing is bad, ignoring and impeding the cases where, with informed user\nconsent, it can be a powerful tool on the modern web. I also believe that\nApple are viewing the user experience through a US focus, where in the global\nservice marketplace their position is far less strong, and <strong>Sign in with\nApple</strong> could be a confusing concept to many.</p>\n<hr>\n<h2 id=\"sign-in-≠-sign-up\" style=\"position:relative;\"><a href=\"#sign-in-%E2%89%A0-sign-up\" aria-label=\"sign in ≠ sign up permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sign in ≠ Sign up</h2>\n<p>The first issue to cover is the lack of differentiation between “Sign in” and\n“Sign up”. While it is understandable as a user experience goal—that that\nusers shouldn’t need to know if they have an account and should just be\nmagically signed in when needed, and while it may make sense for “utilities”\nlike Uber, I don’t believe this pattern works for all services.</p>\n<p>For many kinds of accounts, the transition that a user goes through when they\n<em>sign up</em> is important to them. They go from no communication, to having\ncommunication from a service. In the case of LinkedIn they go from not having\na profile, to having a filled out CV/Resume-like profile after filling out\ntheir profile to achieve 100%. In the case of Thread they go from having a\nnon-personalised store to having one that only contains products that would\nlook good on them, after indicating which styles of outfit they like.</p>\n<h4 id=\"thread-⨉-facebook\" style=\"position:relative;\"><a href=\"#thread-%E2%A8%89-facebook\" aria-label=\"thread ⨉ facebook permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread ⨉ Facebook</h4>\n<p>Thread, like many services, originally offered Facebook as a way to\nauthenticate in our sign-up and sign-in flows. It’s accepted by many that this\nis just necessary for consumer services on the web, however a number of years\nago while optimising our registration flow, we found that removing Facebook\nsign-up significantly improved the number of people becoming customers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.\nFor this reason, we decided to remove Facebook sign-up.</p>\n<p>However we still have many thousands of customers that <em>signed up</em> with\nFacebook, and who needed to be able to return and <em>sign in</em> again. For this\nreason we still have the <strong>Sign in with Facebook</strong> button on our sign in page.\nWhen it came to creating our <a href=\"https://itunes.apple.com/app/apple-store/id966956740?pt=117711895&#x26;mt=8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iOS\napp</a>,\nwe implemented the same <strong>Sign in with Facebook</strong> button on the sign-in\nscreen, omitting it from our <em>sign-up</em> flow as we had done on the web. If\nsomeone who has not used Thread before clicks/taps the <strong>Sign in with\nFacebook</strong> button instead of going through our regular registration process,\nthey receive an error message. We don’t create them an account, we don’t tie\nany information from Facebook to their account if they do choose to sign up.</p>\n<p>This brings us to the first problem with <strong>Sign in with Apple</strong>.</p>\n<blockquote>\n<p>It will be required as an option for users in apps that support third-party\nsign-in when it is commercially available later this year.</p>\n</blockquote>\n<p>Will it be required for Thread? Apple have not yet answered this question in\ntheir documentation, nor have they responded to a request for clarification (FB6135661).</p>\n<p>There are three potential solutions to this problem:</p>\n<ol>\n<li>Apple make allowances for “legacy” accounts, as long as new accounts are\nnot created with the social logins. This is Thread’s preferred choice, at\nleast for the short-mid term.</li>\n<li>We implement <strong>Sign in with Apple</strong>, likely Apple’s preferred choice, but\nas we shall see later there may be other issues with this.</li>\n<li>We remove <strong>Sign in with Facebook</strong>, likely Apple’s second favourite\nchoice, but this prevents a significant proportion of our userbase from\nusing the service <em>on Apple devices</em>.</li>\n</ol>\n<h4 id=\"engineering-cost\" style=\"position:relative;\"><a href=\"#engineering-cost\" aria-label=\"engineering cost permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Engineering cost</h4>\n<p>We’ll go into more issues with <strong>Sign in with Apple</strong> later, but for now it’s\nworth mentioning that a major issue with (2) above is that implementing a new\nidentity provider is a significant engineering undertaking.</p>\n<p>For small companies, even with libraries and tools provided and support from\nopen-source frameworks, this will represent a shift in focus from working on\ncreating value for the business and its customers, to chasing Apple’s\nrequirements. For some, this will be worth it for their customers, for others\nit won’t be. Many companies out-source app development, where this could\nrepresent a large financial cost. Some companies use off-the-shelf app\ncreation tools which may not even support this, at least not for a while.</p>\n<p>For larger companies, reliability, scalability and monitoring concerns make\nthis sort of task a large project, especially at such a core part of the\ncustomer journey as sign-in.</p>\n<p>Thread sits somewhere between these two, but has an additional concern of the\nfact that we have never supported multiple social sign-in providers, we only\never supported Facebook. As many engineers will know, going from 1 to “n” of\nsomething is often a bigger job that going from 0 to 1 of it. This makes this\na bigger engineering task than it may appear, and in the context of us no\nlonger wanting Facebook sign-up, a hard one to justify.</p>\n<h4 id=\"how-big-is-this-problem\" style=\"position:relative;\"><a href=\"#how-big-is-this-problem\" aria-label=\"how big is this problem permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How big is this problem?</h4>\n<p>Thread needs to differentiate between sign-up and sign-in, and for historical\nreasons allows one but not the other. While this isn’t going to be an\nextremely common scenario, anecdotally it feels relatively common to me. I\nwent through a period of using <strong>Sign in with Twitter</strong> everywhere I could,\nbut this option seems to have gone out of fashion and I am finding that I have\nto hunt for these options more and more where they have been superseded by\nFacebook and Google.</p>\n<p>Authentication is hard, even if outsourcing the problem to social sign-in\nproviders. This means authentication systems stick around for a long time.\nGiven how they are used and the relatively uncommon practice of getting users\nto reconfigure their authentication, they tend to accumulate code paths that\nhave to be supported for a long time to come. I’m willing to bet that many\ncompanies are not in a position to change their authentication situation, and\nthat a significant number are in the process of phasing out some options.</p>\n<h4 id=\"isnt-removing-facebook-sign-in-exactly-what-apple-wants\" style=\"position:relative;\"><a href=\"#isnt-removing-facebook-sign-in-exactly-what-apple-wants\" aria-label=\"isnt removing facebook sign in exactly what apple wants permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isn’t <em>removing</em> Facebook sign-in exactly what Apple wants?</h4>\n<p>Yes and no. Apple want to sell more Apple devices and one method of doing that\nis creating more lock-in which <strong>Sign in with Apple</strong> will do. The other\nmethod is by pushing their brand, and their current favourite way of doing\nthis is emphasising the privacy benefit over competitors.</p>\n<p>While forcing products to remove Facebook <em>sign-up</em> achieves this, forcing the\nremoval of <em>sign-in</em> does not. On the one hand it doesn’t create more lock-in\nbecause it’s not adding Apple’s SSO, and on the other I don’t believe it\nreally enhances user privacy<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. Given that it achieves neither of Apple’s\ngoals, is it worth doing, or is it just an unintended side-effect of a blunt instrument?</p>\n<h4 id=\"what-this-means-for-customers\" style=\"position:relative;\"><a href=\"#what-this-means-for-customers\" aria-label=\"what this means for customers permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What this means for customers</h4>\n<p>In all likelihood, the result of this is that for a portion of our userbase,\non iOS only, we will build an account conversion flow that will take users out\nto the web, have them sign in with Facebook, and then convert them to a\nregular account (by setting a password) and then taking them back into the app.</p>\n<p>We can only hope that Apple allow having Facebook sign-in on a web page with\nthe only purpose of allowing non-Facebook sign-in.</p>\n<p>This is not a great user experience when a customer just wants to sign-in to\nan app and get on with their task. This poor UX already feels like Apple are\nshooting themselves in the foot somewhat (as it will only apply on Apple\ndevices), and the UX will be far worse if Apple choose not to allow apps to\nbuild this sort of upgrade flow<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.</p>\n<hr>\n<h2 id=\"fighting-fraud\" style=\"position:relative;\"><a href=\"#fighting-fraud\" aria-label=\"fighting fraud permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fighting Fraud</h2>\n<p>One of the headlining features of Apple’s SSO service is that users have the\noption to hide their email address from the service they are signing up to,\ninstead relaying any email through Apple’s servers.</p>\n<p>Instead of the service seeing the address <em>contact@danpalmer.me</em>, the service\nwill be provided an address such as <em>521d61ae4d@private.relay.apple.com</em>. Each\nservice the user signs up for will see a different email address. This is\ngreat for users as they can immediately stop all email from that service at\nany time, so if a service is hacked and their email address leaked, they have\nan easy way to prevent spam.</p>\n<h4 id=\"background-on-paying-later\" style=\"position:relative;\"><a href=\"#background-on-paying-later\" aria-label=\"background on paying later permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background on “Paying Later”</h4>\n<p>Let’s take a moment to talk about a common concern in retail, financing. Many\npurchases are above what people can afford at the time they are made, so we\noften prefer to split the cost of a purchase over time, or prefer trial a\nproduct and pay only when we’ve decided that we will keep the purchase.</p>\n<p>Thread offers this latter option, to “pay later” in our checkout process so\nthat customers can order clothing, try it on at home, send back what they\ndon’t like or doesn’t fit, and then only pay for what they keep which may even\nbe nothing. This may not sound the same as a loan to spread the cost over\nmonths or years, but at a basic level it is, and the UK’s Financial Conduct\nAuthority (FCA) certainly consider it to be the same.</p>\n<p>Those providing this credit must be FCA approved to offer this in the UK. This\nis quite a burden, so like most retailers we outsource this to a third party\npayments provider who take on the responsibility of being FCA approved, as\nwell as the fraud risk and the risk of a customer just “forgetting” to pay\n(often called “friendly fraud”). Since the third party provider are providing\ncredit to the customer, they do a credit check (in this case one that is not\nrecorded on their credit history). In order to perform this we share basic\nuser details with them only for the purpose of performing this check, and on\nthe basis of this check the provider will either agree or decline to offer the credit.</p>\n<p>If the customer decides to take the credit, the outstanding balance is added\nto an account with the payments provider, and they can pay it off any time\nthey like over the next 30 days.</p>\n<p>A crucial detail is that this account with the provider will also hold any\nbalance that the customer may have by using that payment provider with <em>other\nretailers</em>. Any outstanding balance, payment history, and payment issues that\nmay have occured in the past are some of the main deciding factors in whether\nthe customer is offered the credit or not<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>.</p>\n<p>How does the payments provider know if the customer has an outstanding\nbalance? They use the customer’s email address.</p>\n<h4 id=\"correlating-email-addresses\" style=\"position:relative;\"><a href=\"#correlating-email-addresses\" aria-label=\"correlating email addresses permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Correlating Email Addresses</h4>\n<p>This brings us to the crux of the privacy advantage of <strong>Sign in with Apple</strong>,\nbut also the biggest <em>problem</em>: with the private email addresses services can\nno longer correlate email addresses between each other. In many ways this is\ngreat – preventing a service from telling Facebook that you signed up with\nthat email address prevents Facebook from learning something about you and\nthat’s good for privacy. It prevents advertising networks from building the\nlinks that are so valuable to them, the cost of which is completely hidden\nfrom the user<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup>.</p>\n<p>But what about our pay-later example? In this case the email address isn’t\ngoing into a “network”, it’s just being used to look up an existing account<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup>. It’s not a hidden side-effect with no benefit to our customers,\nin this case it’s a feature of our service, being used with the consent of our\ncustomers, in order to provide direct value to them.</p>\n<p>Use of data is not inherently bad, and this is a great example of where\nsomething that wasn’t before possible – taking on the risk of providing a loan\nin this way – is now possible (at a low enough cost) for it to be a feature\nthat a payment provider can offer, and that we can make available for our\ncustomers to improve their shopping experience.</p>\n<h4 id=\"apples-answer\" style=\"position:relative;\"><a href=\"#apples-answer\" aria-label=\"apples answer permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apple’s Answer</h4>\n<p>Apple do have an answer to the question of fraud, whether it’s satisfying\ndepends on what is considered fraud, and what behaviour a service is trying to limit.</p>\n<p>On account creation, Apple will return a boolean value to the app that\nrepresents whether the user is a “trusted” user. True means that Apple has a\nhigh confidence this user is legitimate, likely because their Apple account\nhas years of history of legitimate use. False means that Apple does not know\nif this user is legitimate (it doesn’t mean they are <em>illegitimate</em> in any\nway).</p>\n<p>This is a novel feature and I think it’s likely to have a very low false\npositive rate as Apple have so much account history, purchase history, and\ndevice activity for most legitimate users. For services such as social\nnetworks who are trying to limit fake accounts, this may be a very effective tool.</p>\n<p>However the design is a very <em>account centric</em> design. It’s only intended to\nassess whether the user signing up to a service with Apple’s SSO is a real\nperson or a “bot”. It is not intended to assess whether the user intends to\ncommit fraud – intentionally or not – on that account.</p>\n<p>Unfortunately this is completely ineffective for the pay-later scenario, which\ndepends on being able to correlate user accounts. Further, it’s probably\nunsuitable for most retail or the sale of most goods.</p>\n<h4 id=\"what-can-we-do-about-this\" style=\"position:relative;\"><a href=\"#what-can-we-do-about-this\" aria-label=\"what can we do about this permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What can we do about this?</h4>\n<p>There are a couple of directions this could go.</p>\n<ol>\n<li>Using the trustworthiness flag that Apple pass through.</li>\n<li>Collecting real email addresses at account creation, or “upgrading” to a\nreal address later on if required.</li>\n<li>A trusted partnership programme where select third parties can translate a\nrelay email address to a real one directly with Apple.</li>\n<li>Services disable features for those accounts that signed up with “Sign in\nwith Apple”.</li>\n</ol>\n<p>I don’t believe that Apple’s trustworthiness flag (1) represents enough for\nall possible use-cases, so while this may be a useful feature for services to\ncombat fake accounts, I don’t believe it will provide much more benefit, and\nwill be insufficient for retail. In addition, since this is just a boolean and\nnot a signed statement provided by Apple, third party services such as payment\nproviders are unlikely to accept it as a useful input to fraud models.</p>\n<p>Apple does provide the option for a user to give their real email address to\nthe service they are signing up for (2), but users making this choice can’t be\ndepended on. Services could build a flow to detect that a user has given us a\nrelay address and “upgrade” to their real address later in the account\nlifecycle at the point that we need to provide the email address to third\nparties. Building this and maintaning a good user experience is complex, and a\ncumbersome UX in parts of a user journey such as checkout could have a\nsignificant business impact. Apple could provide a flow in their API for doing\nthis with a relatively frictionless user experience, but so far appear not to\noffer this as an option.</p>\n<p>While this may work for some products, there are others where a real email\naddress being used is fundamental to the service being provided – Gravatar\ncomes to mind as an example. These products have no way to <em>enforce</em> that\nusers sign up with a real email address, and will simply have to detect\nApple’s relay addresses and reject the new account, a poor user experience,\nthe cause of which may be difficult to communicate to the user. This may not\nbe allowed under Apple’s policy.</p>\n<p>Potentially the least-worst option here, is for Apple to create a partnership\nprogramme for sharing email addresses (3). This would allow select partners,\nwho have committed to some terms of use from Apple, to convert a relay address\nto a real address. This way a user would sign up to Thread choosing to provide\na relay email address instead of their real one. We would then pass this relay\naddress to our payment provider as normal, with our customer’s permission,\nwith no changes to our process, and they would be able to look this up in\norder to correlate it to an existing address in their system<sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup>.</p>\n<p>Unfortunately, the easiest option of the lot here is that these features are\nsimply not offered to users who signed up for the service with Apple’s SSO.\nThis will result in pain for users, who will miss out on features, pain for\nproduct teams who have to work around poor user experiences, pain for customer\nsupport teams who will have to explain why features are not available, and all\nwith potentially no benefit to customer privacy in cases where sharing is\nbeing done for legitimate customer interest.</p>\n<hr>\n<h2 id=\"apples-email-relay\" style=\"position:relative;\"><a href=\"#apples-email-relay\" aria-label=\"apples email relay permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apple’s “Email” Relay</h2>\n<p>The last issue to cover, and potentially the most difficult to reconcile, is Apple’s <a href=\"https://help.apple.com/developer-account/#/devf822fb8fc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">policies around sending email to their relay service</a>. This is the\nservice that relays email from the private addresses like\n<em>521d61ae4d@private.relay.apple.com</em> to the original accounts.</p>\n<blockquote>\n<p>In order to send email messages through the relay service to the users’\npersonal inboxes, you will need to register your outbound email domains. All\nregistered domains must create Sender Policy Framework (SPF) DNS TXT records\nin order to transit Apple’s private mail relay. You can register up to 10\ndomains and communication emails.</p>\n</blockquote>\n<p>This has the potential to render services useless, as it requires developers\nto either:</p>\n<ul>\n<li>know up front the domains they will send from (limited to 10), and <em>prove\nownership of those domains</em>, or…</li>\n<li>know up front which email addresses they will send from (limited to 10).</li>\n</ul>\n<p>It’s not clear whether the 10 limit is across domains and emails, or a\nseparate limit for each.</p>\n<p>There are many problems with these restrictions.</p>\n<ol>\n<li>Services that use dynamic domains (for example thread.foobar.com) will be\nunable to authenticate all of their domains.</li>\n<li>Best practice for email deliverability suggests that senders should send\nfrom a different domain per category of email that they send<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup>. This\nmostly applies to larger products, but 10 domains is too limiting.</li>\n<li>For third parties who email users on behalf of the service they signed up\nfor, it will be impossible to prove ownership of the domain for each\npartner they work with, and they may not be able to provide the specific\naddresses that they send from, or these may change over time, creating\nsignificant business risk.</li>\n<li>Third parties who email users on behalf of the service they signed\nup for may not have implemented the requisite Sender Policy Framework\nmeasures, and may be unable or unwilling to do this.</li>\n</ol>\n<p>The first two are difficult requirements to meet, and could alone rule out the\nuse of <strong>Sign in with Apple</strong> for some products, however they are at least\nfully within the control of the product. The latter two are more concerning.\nLet’s dive into a specific example…</p>\n<h4 id=\"collection-delivery\" style=\"position:relative;\"><a href=\"#collection-delivery\" aria-label=\"collection delivery permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection Delivery</h4>\n<p>Thread delivers orders with a regular parcel service, but also offers\n<em>collection delivery</em>, where parcels are dropped off at a store of some sort,\nand the customer can collect it at their convenience. For Thread this works\nlike a typical shipping provider, but once it arrives at the store and is\navailable for collection, the customer receives an email with a pickup code\nthat they must provide when collecting their parcel. This email with the\npickup code is sent by the <em>shipping provider</em>, not by Thread. There are\nmultiple reasons why this is the case, but it’s worth noting that may not be\nwithin Thread’s control – it may be a requirement of the shipping provider<sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup>.</p>\n<p>This presents a problem. We cannot prove ownership of the domain the provider\nuse to send their email. We don’t own it, but even if we could send the proof\ndocument that Apple provide to the provider to upload to their servers, this\nprocess would only be possible for a single customer of that shipping\nprovider, unless email for each retailer was sent from a separate domain.</p>\n<p>We could ask the shipping provider which email addresses they will contact the\ncustomer from, but if we assume that they have 3 – one for pickup codes, one\nfor customer support, one for service updates, this would use 30% of our email\naddress limit with Apple, and we currently have at least 4 third party\nservices in a similar situation to this provider. Retailers that operate in\nmultiple countries could easily have hundreds of such suppliers, and require\nthousands of email addresses.</p>\n<p>This also creates a problem if or when the provider chooses to change how they\nsend email. In the case of this provider, their tech is provided by another\ncompany that they have a partnership with. This means that when changing the\naddress or domain they send email from, a product manager or similar at the\ntech company, who have no business relationship with Thread, must notify some\nsort of partnerships manager, who must notify our shipping provider, who must\nnotify someone at Thread, who must notify someone with enough knowledge of the\nrequirements of <strong>Sign in with Apple</strong> to know that this means something needs\nchanging. That’s a long chain of communication that needs to work perfectly,\nas well as needing to jump from being an <em>operations</em> conversation to being\none about <em>authentication</em> – two otherwise unrelated areas. It is unreasonable\nof Apple to believe that this will happen.</p>\n<h4 id=\"potential-solutions\" style=\"position:relative;\"><a href=\"#potential-solutions\" aria-label=\"potential solutions permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Potential solutions</h4>\n<p>There are a couple of potential solutions here but none are guaranteed to\nwork, which means that it’s almost certain that some companies will be left in\na bad situation.</p>\n<ul>\n<li>\n<p>Thread could send the pickup code emails.</p>\n<p>This assumes that the shipping provider would allow us to do this, which is\nnot a given (for the pay-later payments provider sending invoices is almost\ncertainly something we will not be able to do).</p>\n</li>\n<li>\n<p>Entire industries could become stricter about how they send email, and how they <em>change</em> how they send email, understanding many more stakeholders in\nthat process.</p>\n<p>The logistics industry and payments industry are the two covered here, and\nboth are unlikely to change for this as they are typically very slow moving,\nplanning technology changes a decade out in some cases. The understanding of\nthe stakeholders is unlikely to happen as this is already a problem in\ntechnology and the web in particular that hasn’t been solved in 30+ years,\nso will probably not happen before the end of this year because of Apple’s requiremnts.</p>\n</li>\n<li>\n<p>Apple could treat relay email like real email, and not limit the number of\nsenders or where email comes from in any special way.</p>\n<p>Email providers like Apple (iCloud), Google, and Microsoft, already apply\nmany restrictions to email delivery. Spam detection is pretty good, it’s far\nmore possible to authenticate senders now than it was not that long ago.\nLegitimate email senders are used to these restrictions and understand them\nrelatively well.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"next-steps\" style=\"position:relative;\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h2>\n<p>While I’m excited about the future of <strong>Sign in with Apple</strong>, and keen for the\nprivacy enhancing properties that it may bring to many apps, I’m concerned\nthat Apple has not given enough thought to how it interacts with the complex\necosystem of authentication, fraud checks, and inter-service operability. I\nbelieve that a significant number of products will be unable to continue to\noperate within the policy.</p>\n<p>In its current form <strong>Sign in with Apple</strong> is a blunt instrument – marketed as\nimproving user privacy, but instead preventing whole classes of data use\nregardless of their actual privacy impact or the UX benefits that may no\nlonger be possible. In the EU where GDPR restricts what companies may do with\ncustomer data, this leaves Apple’s SSO providing little to no benefit over\nwhat is already required by law.</p>\n<p>Apple should have launch this as a purely opt-in service for the first 2 years\nto see how it is adopted, and to work with those in the community who depend\non email addresses for fraud detection and other services to explore options\nthat may prevent the need for passing an email address through every third party.</p>\n<p>Since this is unfortunately not the direction they have chosen, I would like\nto see the following from Apple, all of which I feel are aligned with their\nultimate goals:</p>\n<ul>\n<li>Drop the policies around email going through the relay service. Perform spam\nfiltering and detection of bad actors as normal, but otherwise treat this as\nany other email provider would.</li>\n<li>Distinguish between signing <em>in</em> and signing <em>up</em>, ”<a href=\"https://en.wikipedia.org/wiki/Grandfather_clause\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">grandfather\nin</a>” any accounts that are\nnot created on iOS, allowing them to continue to sign in, without the app or\nservice being required to adopt Apple’s SSO.</li>\n<li>Allow apps to use social sign-ins, without adopting Apple’s SSO, when the\npurpose of the sign-in is only to convert the account into a non-social\naccount, allowing apps a migration path away from social sign-in instead of\nrequiring the adoption of Apple’s SSO.</li>\n<li>Allow apps to <em>require</em> a real email address at sign-up, if doing so can be\nshown to be a core requirement of the service they provide.</li>\n<li>Provide apps an easy way to request a real email address, to “upgrade” from\nthe Apple private email address, after account creation.</li>\n</ul>\n<p>These would address my concerns for whether Thread will be able to use <strong>Sign\nin with Apple</strong> and around the UX impact for our customers. However these are only <em>our</em> issues, and Thread is only a moderately complex online service with\na retail side, large online retailers will be harder hit than us, complex\nonline services may find it more difficult than us to integrate, and other\nindustries could be hit in completely different ways. How does this affect\ntravel, event ticketing, service marketplaces? I’d be willing to bet that each\nindustry will have its own nuances that will be difficult or impossible to\nreconcile with Apple’s policies.</p>\n<p>I would urge Apple consider more of the nuances of these ecosystem before\nputting strict requirements on third party developers that could harm their\nbusinesses, and worsen user experience across iOS, the web, and all other platforms.</p>\n<hr>\n<h4 id=\"ps\" style=\"position:relative;\"><a href=\"#ps\" aria-label=\"ps permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>P.S.</h4>\n<p>One of my colleagues once told me about the idea of “feature complexity”,\napplying the concept of <a href=\"https://www.geeksforgeeks.org/analysis-algorithms-big-o-analysis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">algorithmic\ncomplexity</a>\nin algorithms to features of products. Changing the text on a page might be an\n<em>O(1)</em> feature – it (naively) has no knock-on effects or maintenance. Adding\nan API to the product though might be an <em>O(nm)</em> feature, <em>n</em> work needs to be\ndone to support the API for every <em>m</em> other feature that needs to be available\nin the API, a far more expensive feature to create and therefore one that must\nbe considered carefully. This isn’t intended to be a perfect measure, but it\ncan be a useful thought experiment.</p>\n<p>While much of this post is written from my perspective as someone who helps\ncreate a product for customers, I think much of my gut response to this comes\nfrom my perspective as an engineer, seeing the design choices of <strong>Sign in\nwith Apple</strong> leak out from authentication into so many aspects of the product,\nthe process of maintenance for that product over time, the features we can\noffer, and so on.</p>\n<p>Apple have, maybe unintentionally, created an <em>O(nm)</em> feature in the number of\nplatforms a product works across and the number of third party services that\ndepend on an email address, or potentially higher if more factors need to be\nconsidered. I worry that years down the line we will be making important\ndecisions about user experience or even how we deliver our products to\ncustomers, based on the fact that some portion of users use Apple’s SSO to sign-up.</p>\n<p>As a user a look forward to having this option, but as an engineer on a\nproduct that respects user privacy, complies with some of the strictest laws\nin the world around it, and that uses user data to create great experiences\nfor those users, I am disappointed in all of the possible resolutions\navailable within Apple’s policies.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n</style>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  Since this distinction may be nuanced, it’s worth noting that this is not\njust the number of users completing sign-up, but more measured as the value\nto the business in them becoming customers. While I can’t remember if this\ndistinction was relevant in this particular test, one thing we have seen in\nchanges to the registration process is that they can reduce the number of\nsign-ups, but increase the number of customers.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>  There are three main points at which Facebook receive information from a\nsocial sign-in: at sign-up, at the point the app/site/service registers an\naccount conversion with Facebook, and at re-authentication time when the\nuser signs in again. It’s very likely that the first two have already\nhappened by this point, and they contain the bulk of the interesting data –\nFacebook knows that you use the app, they know all the data about you that\nthe app chose to share when marking you as “converted”, they likely know\nwhere you came from to install the app or sign up for an account (i.e. the\nmarketing channel).</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>  Thread is lucky that we have a website where we can put this flow – many\napps don’t and would have to have the flow in the app, something I have very\nlittle hope of Apple allowing, as this would mean that a <strong>Sign in with Facebook</strong> button would still exist in the app, without the requisite <strong>Sign\nin with Apple</strong> button.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>  If you’ve paid off a £100 balance three times before, they may well let you\ndo the same for £500. If you paid late (with a fee) on a £100 balance, they\nmay not let you take credit again (these numbers are an example and may not\nbe entirely accurate, but are representative of how this may work).</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>  As these addresses start to become more pervasive, the quality of the hidden\n“knowledge graph” of user data will begin to deteriorate. I wonder whether\nApple’s SSO has the power alone to cause this enough to materially impact\nthe industry. I suspect it may be a little like herd immunity, in that total\ncoverage may not be needed to sufficiently deteriorate the data quality, to\nmake it nearly worthless.</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-6\">\n<p>  It I’m not entirely familiar with the terms of service of our payment\nprovider, so potentially they may not be as innocent as I make out, however\nI suspect they probably do not forward this on as selling customer data does\nnot appear to be in their business model, could very well breach FCA\nregulations, and would likely violate GDPR.</p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-7\">\n<p>  The address conversion could even be done to a normalised and hashed email\naddress so that the third party service must already know about the address\nin order to reveal it, and would be unable to harvest new addresses from the programme.</p>\n<a href=\"#fnref-7\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-8\">\n<p>  This is a huge simplification, but roughly transactional email, marketing\nemail, notifications, and service updates should be split across different\ndomains. This allows for email providers to understand the separate patterns\nthat each of these will have, and tailor their handling of the email accordingly.</p>\n<a href=\"#fnref-8\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-9\">\n<p>  I can’t speak to whether it actually is in this case, but different\nproviders have different approaches. Some are happy to be just a carrier,\nand have almost all aspects of their service be “whitelabelled” and branded\nor controlled by the client (Thread). Others prefer to own more of the\ncustomer relationship, and have a brand presence, therefore requiring that\nthey own communication with the customer. Issues are similar for payment\nproviders – it’s rare to see a Stripe logo on a page or email as they are\nhappy to be “infrastructure” in that way, but you never pay with PayPal\nwithout going <em>through</em> PayPal and seeing plenty of their branding. It’s a\ncomplex topic, and one that Apple are not going to simply force by sheer weight.</p>\n<a href=\"#fnref-9\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2019-07-02-on-signing-in-with-apple/"},"frontmatter":{"title":"Design Issues of Sign in with Apple","theme":"sign-in-with-apple","originally_on_thread":null,"date":"05 July, 2019"}},"site":{"siteMetadata":{"title":"Dan Palmer","description":"Personal site and blog"}}},"pageContext":{"slug":"/2019-07-02-on-signing-in-with-apple/"}}}