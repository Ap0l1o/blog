{"version":3,"sources":["webpack:///./src/components/project/project.module.scss","webpack:///./node_modules/classnames/index.js","webpack:///./src/components/project/project.jsx","webpack:///./src/pages/projects.jsx"],"names":["module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","title","project","languages","className","primary","name","href","repo","role","charAt","toUpperCase","slice","status","description","styles","map","languageName","filter","language","id","style","backgroundColor","colour","query","data","primaryProjects","edges","node","e","secondaryProjects"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,UAAY,qC,qBCD9B,QAAQ,QASR,WACE,aAEA,IAAIC,EAAS,GAAGC,eAEhB,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,EAAQM,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC3C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAE/BK,GACFT,EAAQM,KAAKG,QAEV,GAAgB,WAAZJ,EACT,IAAK,IAAIM,KAAOP,EACVP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAC/BX,EAAQM,KAAKK,IAMrB,OAAOX,EAAQa,KAAK,KAGelB,EAAOC,SAC1CG,EAAoB,QAAIA,EACxBJ,EAAOC,QAAUG,QAKhB,KAFwB,EAAF,WACrB,OAAOA,GACR,QAFoB,OAEpB,aAxCL,I,0KCAe,cAA6B,IAJ1Be,EAIAC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACzB,OACE,yBAAKC,UAAU,OACb,wBACEA,UAAWlB,IAAW,UAAW,CAC/B,kBAAmBgB,EAAQG,QAC3B,mBAAoBH,EAAQG,WAG7BH,EAAQI,MAEX,uBAAGF,UAAU,WACX,uBACEA,UAAU,4BACVG,KAAI,sBAAwBL,EAAQM,MAEnCN,EAAQM,OAGb,wBAAIJ,UAAU,mBAvBFH,EAwBAC,EAAQO,MAvBXC,OAAO,GAAGC,cAAgBV,EAAMW,MAAM,GAsB/C,KAC6BV,EAAQW,QAErC,uBAAGT,UAAU,WAAWF,EAAQY,aAChC,wBAAIV,UAAWW,IAAOZ,WACnBD,EAAQC,UAAUa,KAAI,SAACC,GAAD,OACrBd,EACGe,QAAO,SAACC,GAAD,OAAcA,EAASb,OAASW,KACvCD,KAAI,SAACG,GAAD,OACH,wBAAIrB,IAAKqB,EAASC,IAChB,0BAAMC,MAAO,CAAEC,gBAAiBH,EAASI,UACxCJ,EAASb,eCLbkB,GA5BE,sBAAe,IAAZC,EAAW,EAAXA,KAChB,OACE,kBAAC,IAAD,KACE,yBAAKrB,UAAU,sBACZqB,EAAKC,gBAAgBC,MAAMX,KAAI,gBAAGY,EAAH,EAAGA,KAAH,OAC9B,yBAAK9B,IAAK8B,EAAKR,GAAIhB,UAAU,kBAC3B,kBAAC,EAAD,CACEF,QAAS0B,EACTzB,UAAWsB,EAAKtB,UAAUwB,MAAMX,KAAI,SAACa,GAAD,OAAOA,EAAED,eAKrD,wBAAIxB,UAAU,uBACd,yBAAKA,UAAU,sBACZqB,EAAKK,kBAAkBH,MAAMX,KAAI,gBAAGY,EAAH,EAAGA,KAAH,OAChC,yBAAK9B,IAAK8B,EAAKR,GAAIhB,UAAU,kBAC3B,kBAAC,EAAD,CACEF,QAAS0B,EACTzB,UAAWsB,EAAKtB,UAAUwB,MAAMX,KAAI,SAACa,GAAD,OAAOA,EAAED,iBASzC","file":"component---src-pages-projects-jsx-0dae2653a2d7f90835f4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"languages\":\"project-module--languages--21JCK\"};","require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport styles from \"./project.module.scss\";\n\nconst titleise = (title) => {\n  return title.charAt(0).toUpperCase() + title.slice(1);\n};\n\nexport default ({ project, languages }) => {\n  return (\n    <div className=\"mr5\">\n      <h3\n        className={classNames(\"pt5 mv0\", {\n          \"f3-ns f2-m f1-l\": project.primary,\n          \"f5-ns f4-m f3-l\": !project.primary,\n        })}\n      >\n        {project.name}\n      </h3>\n      <p className=\"pt2 mv0\">\n        <a\n          className=\"link gray underline-hover\"\n          href={`https://github.com/${project.repo}`}\n        >\n          {project.repo}\n        </a>\n      </p>\n      <h4 className=\"pt2 mv0 silver\">\n        {titleise(project.role)}, {project.status}\n      </h4>\n      <p className=\"pt2 mv0\">{project.description}</p>\n      <ul className={styles.languages}>\n        {project.languages.map((languageName) =>\n          languages\n            .filter((language) => language.name === languageName)\n            .map((language) => (\n              <li key={language.id}>\n                <span style={{ backgroundColor: language.colour }} />\n                {language.name}\n              </li>\n            ))\n        )}\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout.jsx\";\nimport Project from \"../components/project/project.jsx\";\n\nexport default ({ data }) => {\n  return (\n    <Layout>\n      <div className=\"pb3 flex flex-wrap\">\n        {data.primaryProjects.edges.map(({ node }) => (\n          <div key={node.id} className=\"w-100-m w-50-l\">\n            <Project\n              project={node}\n              languages={data.languages.edges.map((e) => e.node)}\n            />\n          </div>\n        ))}\n      </div>\n      <hr className=\"bb b--black-20 mt5\" />\n      <div className=\"pv3 flex flex-wrap\">\n        {data.secondaryProjects.edges.map(({ node }) => (\n          <div key={node.id} className=\"w-100-m w-50-l\">\n            <Project\n              project={node}\n              languages={data.languages.edges.map((e) => e.node)}\n            />\n          </div>\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    primaryProjects: allProjectsYaml(filter: { primary: { eq: true } }) {\n      edges {\n        node {\n          ...ProjectFragment\n        }\n      }\n    }\n\n    secondaryProjects: allProjectsYaml(filter: { primary: { eq: false } }) {\n      edges {\n        node {\n          ...ProjectFragment\n        }\n      }\n    }\n\n    languages: allLanguagesYaml {\n      edges {\n        node {\n          id\n          name\n          colour\n        }\n      }\n    }\n  }\n\n  fragment ProjectFragment on ProjectsYaml {\n    id\n    name\n    repo\n    role\n    description\n    languages\n    status\n    primary\n  }\n`;\n"],"sourceRoot":""}