{"componentChunkName":"component---src-components-post-post-jsx","path":"/2018-10-28-graphql-interfaces-vs-unions/","result":{"data":{"markdownRemark":{"html":"<p>GraphQL’s type system allows us to make many invalid states impossible to\nrepresent, which improves the usability and reliability of our APIs. Two\nfeatures of the type system that contribute significantly to this are\nInterfaces and Unions, however they can be used to address similar design\nconsiderations so it’s not always obvious which is the right option.</p>\n<p>In this post we’ll look at several examples from the Thread API, and explore\nwhether using an interface or a union is the right option. It’s not always\nobvious, and in some cases we got it wrong the first time, but after reading\nthis post we hope you’ll have more tools to hand to help you choose the option\nthat’s the best fit in each circumstance.</p>\n<h3 id=\"ideas-feed-content--a-union\" style=\"position:relative;\"><a href=\"#ideas-feed-content--a-union\" aria-label=\"ideas feed content  a union permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>“Ideas Feed” content – a Union</h3>\n<p>The first example we’re going to cover is the Thread Ideas Feed. This is a\nfeed of content that can come in different types. These content items\nrepresent recommendations from the user’s stylist contain products and\npersonalised descriptions. In the future we want to experiment with many more\ntypes of content than the <em>Collections</em> and <em>Combinations</em> that we have at the moment.</p>\n<p>The items we have in the feed, “Ideas”, currently have some common fields such\nas the date time they were created, a stylist, a photo, a title, etc. Given\nall these shared fields it’s tempting to define the ideas as an interface:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">IdeasFeed</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ideas: [</span><span class=\"mtk5\">Idea</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Idea</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    title: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    description: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    image: </span><span class=\"mtk5\">URL</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    stylist: </span><span class=\"mtk5\">Stylist</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    created: </span><span class=\"mtk5\">DateTime</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    products: [</span><span class=\"mtk5\">Product</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Collection</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Idea</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Combination</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Idea</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>However, this doesn’t feel like a great implementation. We’ve ended up with\ntwo empty types for the different kinds of ideas. This suggests that we should\nhave used an <code>IdeaType</code> enum and made <code>Idea</code> a type instead of an interface.</p>\n<p>This alternative wouldn’t take us very far though. Consider adding a type\n<code>StyleQuiz</code> that asks users a few questions about their style preferences.\nThis would not have any products, so we’d need to return an empty list of\nproducts. It might not have an image, so we’d need to update our interface to\nallow for a nullable image URL. Considering this new type, the interface\npattern begins to break down. Radically different types such as this would\nresult in an explosion of nullable fields – either on the <code>Idea</code> type if we\nused an enum, or on the interface.</p>\n<p>Lastly, an interface doesn’t reflect how we want clients to use these types.\nThis is because feed items may have the same fields, but the design of them\nand how the user interacts with them may be completely different. We might\ncreate a new content type that should be rendered in a very different way, but\nwhich the client might not recogise and might render in an existing style or\nlayout. This could be fixed by the client checking the <code>__typename</code> field, but\nas this isn’t enforced by the API, it’s easy to get wrong, rather than easy to\nget right.</p>\n<p>Some requirements are forming here:</p>\n<ol>\n<li>Clients should understand the exact content type they are rendering, and\nhow to render it, rather than using the fields on that content in generic ways.</li>\n<li>Feed items must be able to have radically different formats, without losing\ntype safety.</li>\n</ol>\n<p>A design based around Unions may be a better fit here:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">IdeasFeed</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ideas: [</span><span class=\"mtk5\">Idea</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">union</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Idea</span><span class=\"mtk1\"> = </span><span class=\"mtk5\">Collection</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Combination</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Collection</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  title: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  description: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  image: </span><span class=\"mtk5\">URL</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  stylist: </span><span class=\"mtk5\">Stylist</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  created: </span><span class=\"mtk5\">DateTime</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  products: [</span><span class=\"mtk5\">Product</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Combination</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  title: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  description: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  image: </span><span class=\"mtk5\">URL</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  stylist: </span><span class=\"mtk5\">Stylist</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  created: </span><span class=\"mtk5\">DateTime</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  products: [</span><span class=\"mtk5\">Product</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>This looks like a lot of repeated structure, and right now it is, but because\nthe fields must be accessed through the different types and not through a\ncommon interface, it forces the client to understand them. This is illustrated\nby these two queries in the client. With an interface:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">query</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ideasFeed {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ideas {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      title</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      description</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      image</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      stylist</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      created</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      products</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>and with the union:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">query</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ideasFeed {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ideas {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Collection</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        title</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        description</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        image</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        stylist</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        created</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        products</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Combination</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        title</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        description</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        image</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        stylist</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        created</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        products</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>In a situation where collections and combinations <em>look</em> very different in the\nfeed (even though they have the same fields), this is a key piece of\ndocumentation in the API, and makes it difficult to use the API incorrectly.\nThis addresses the first requirement we had.</p>\n<p>To address the second point in our requirements, this now makes it much easier\nto get the full type safety on new types of content. To use the example of a\nStyle Quiz, rather than having to make products, image, and stylist all\nnullable so that it can conform to the interface, or even worse, rather than\nproviding useless or contrived data in those fields, we can encode exactly\nwhat we want.</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">union</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Idea</span><span class=\"mtk1\"> = </span><span class=\"mtk5\">Collection</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Combination</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">StyleQuiz</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">StyleQuiz</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  title: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  questions: [</span><span class=\"mtk5\">Question</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>In this case a union has worked for us because there is nothing fundamentally\nshared in our use case. There are instances where there may be shared fields,\nand in fact in all the types we have at the moment the fields are all shared,\nbut the use-case is that we have data types that are totally independent.\nWhile it felt that an interface made sense given the number of shared fields,\nit didn’t make sense in the design of the API and for how we want clients to\nuse it. It would fail to document the fact that these types <em>should</em> be\ntreated separately.</p>\n<h3 id=\"cart-line-items--an-interface\" style=\"position:relative;\"><a href=\"#cart-line-items--an-interface\" aria-label=\"cart line items  an interface permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cart line items – an Interface</h3>\n<p>The second example we’re going to cover is line items in a shopping cart.</p>\n<p>Line items are things that contribute to a total. They could be a product, or\nthey could be the shipping cost, or even a gift voucher. These are all quite\ndifferent types of data, and our clients would likely render them in totally\ndifferent ways, which is why we first wrote the cart as:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Cart</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  lineItems: [</span><span class=\"mtk5\">LineItem</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  total: </span><span class=\"mtk5\">Int</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">union</span><span class=\"mtk1\"> </span><span class=\"mtk5\">LineItem</span><span class=\"mtk1\"> = </span><span class=\"mtk5\">Product</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Shipping</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">GiftVoucher</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Product</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  name: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  price: </span><span class=\"mtk5\">Int</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  size: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Shipping</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  price: </span><span class=\"mtk5\">Int</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  nextDay: </span><span class=\"mtk5\">Boolean</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">GiftVoucher</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  amount: </span><span class=\"mtk5\">Int</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  code: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>(These types have been simplified, to not include irrelevant details)</p>\n<p>Our expectation was that the client would read these out and render each line\nitem in a different way. We show products as a block with an image, name,\nsize, etc, we show shipping as a banner indicating if you have free shipping,\ngift vouchers are a subtraction at the bottom, and the total is the last entry.</p>\n<p>This could be better though. We have two core requirements:</p>\n<ol>\n<li>The cart total value <em>must</em> be correct.</li>\n<li>Everything contributing to the total must be presented to the user.</li>\n</ol>\n<p>The first is difficult to get right because the total is presented as a\nseparate field – the total, and the prices of the line items could\ntheoretically get out of sync.</p>\n<p>The second is also difficult to get right in a world where we have clients\nrunning old code. This API will be used in a mobile app, and if that app\nhasn’t been updated to handle, say, a site-wide 10% off discount, then it\nwon’t be selecting it in its query:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">query</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  cart {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    lineItems {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Product</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk6\">...</span><span class=\"mtk1\">ProductFragment</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Shipping</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk6\">...</span><span class=\"mtk1\">ShippingFragment</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">GiftVoucher</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk6\">...</span><span class=\"mtk1\">GiftVoucherFragment</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>This means that while the total will be correct, it won’t display all\ncomponents. While users might be ok with their cart being cheaper than they\nexpected, they tend to stop buying things when it’s the other way around, so\nwe wanted to design an API that is more resilient to server-side updates on\nout of date clients.</p>\n<p>We decided to switch to using an Interface approach.</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Cart</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  lineItems: [</span><span class=\"mtk5\">LineItem</span><span class=\"mtk6\">!</span><span class=\"mtk1\">]</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk5\">LineItem</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  description: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  value: </span><span class=\"mtk5\">Int</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Product</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">LineItem</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  size: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Shipping</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">LineItem</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  nextDay: </span><span class=\"mtk5\">Boolean</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">GiftVoucher</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">LineItem</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  code: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Everything in the cart implements the <code>LineItem</code> interface, which defines a\n<code>value</code> and a <code>description</code>. The <code>value</code> is the contribution of that line item\nto the cart total. For a product this will be positive, but for a Gift Voucher\nthis would be negative, and for free shipping it might just be zero.</p>\n<p>It is now the client’s responsibility to calculate the total by summing all of\nthe values of the line items in the cart. The server guarantees that they will\nsum correctly. This still requires validation work on the server, but it means\nthat there is only one way to get the total, and that restricts the scope for\nbugs, helping to address our first requirement.</p>\n<p>The second feature of this is that because everything in the cart must\nimplement the <code>LineItem</code> interface, as required by the type of the <code>lineItems</code>\nfield, the client knows that everything will always have a value and a description.</p>\n<p>This means that clients can code a fallback representation of anything that\nmight go in the cart. If the server decides to add a new <code>Discount</code> type that\nolder clients don’t support yet, they can at least render a line of text\ndescribing the line item, and show the value contribution to the cart total.\nThis addresses our second requirement, older clients are always able to show\neverything in the cart.</p>\n<p>In this case the reason an interface worked for us was because there is are\nattributes of line items that are fundamental to their ability to work which\ncan be put into an interface. A union didn’t work because it relies on clients\nalways being up to date to be able to get information out of instances in them.</p>\n<h3 id=\"user-accounts--a-union-of-interfaces\" style=\"position:relative;\"><a href=\"#user-accounts--a-union-of-interfaces\" aria-label=\"user accounts  a union of interfaces permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User accounts – a Union of Interfaces</h3>\n<p>This brings us to the final example from Thread’s API: user accounts. There\nare many different types of user on Thread, we have:</p>\n<ul>\n<li>users who signed up for the “styling experience”, this is most users</li>\n<li>users who only came to buy one thing and who might come back, but for now\ndon’t have the styling experience part of the service</li>\n<li>users who closed their account</li>\n<li>users who have not authenticated themselves, so we don’t know who they are</li>\n</ul>\n<p>Users also have certain abilities that they may or may not be able to perform,\ndepending on their account status:</p>\n<ul>\n<li>They may be able to buy things</li>\n<li>They may be able to communicate with a stylist</li>\n<li>We may know their personal details so that we can address them by their\nname or send them an email</li>\n</ul>\n<p>Most of the time clients only need to care about the presence of certain\nproperties, not about the underlying type, but the server needs to compose\nthose properties in different combinations.</p>\n<p>The solution we went with here was a Union of types that conformed to interfaces.</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">union</span><span class=\"mtk1\"> </span><span class=\"mtk5\">User</span><span class=\"mtk1\"> = </span><span class=\"mtk5\">Full</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Limited</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Restricted</span><span class=\"mtk1\"> | </span><span class=\"mtk5\">Anonymous</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Styling</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ideasFeed: </span><span class=\"mtk5\">IdeasFeed</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Ecommerce</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    cart: </span><span class=\"mtk5\">Cart</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    checkout: </span><span class=\"mtk5\">Checkout</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Named</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    informalName: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    fullName: </span><span class=\"mtk5\">String</span><span class=\"mtk6\">!</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Full</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Styling</span><span class=\"mtk1\">, </span><span class=\"mtk5\">Ecommerce</span><span class=\"mtk1\">, </span><span class=\"mtk5\">Named</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Limited</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Ecommerce</span><span class=\"mtk1\">, </span><span class=\"mtk5\">Named</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Restricted</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Named</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk6\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Anonymous</span><span class=\"mtk1\"> </span><span class=\"mtk6\">implements</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Ecommerce</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>This structure allows the server to return the type of user it wants, and\nallows the client to select fields based on how it wants to use the data.</p>\n<p>For example, to get the cart the client could use the query:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">query</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  viewer {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Ecommerce</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      cart {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk6\">...</span><span class=\"mtk1\">CartFragment</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Or to get the ideas feed the client could use the query:</p>\n<pre class=\"grvsc-container github-plus\" data-language=\"graphql\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk6\">query</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  viewer {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk6\">...</span><span class=\"mtk1\"> </span><span class=\"mtk6\">on</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Styling</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      ideasFeed {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk6\">...</span><span class=\"mtk1\">IdeasFeedFragment</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>These queries mean that the client doesn’t need to understand the types of\nusers available, or how various site features map to those types — this is the\nmain benefit of interfaces. However the use of a union for <code>User</code> means that\nwe can have many different interfaces represented, and compose them together\non different types in that union.</p>\n<hr>\n<p>Hopefully these case studies provide deeper context to some of the design\ndecisions we made in the Thread API. These are designs that we didn’t get\nright the first time, but after iterating the design and trying to understand\nhow it would be used in the client and how we would evolve it over time, we\nmanaged to find the designs we currently have.</p>\n<p>In summary:</p>\n<ul>\n<li>Unions are good for documenting, and forcing the client to understand how\ndifferent types should be treated.</li>\n<li>There isn’t always an advantage to grouping shared fields into interfaces,\nit depends on the use-case.</li>\n<li>Interfaces are good for when the types have a fundamental commonality in\nhow they should be used.</li>\n<li>Interfaces can be used to allow clients to be forwards compatible with new\ntypes that the server might introduce, which can be important for mobile\napps that may not be updated frequently.</li>\n<li>Unions and interfaces can be combined to compose together behaviours into\nmore complex types, but to still allow the client to select the fields it\nneeds in each situation.</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .github-plus {\n    background-color: #ffffff;\n    color: #24292e;\n  }\n  .github-plus .mtk6 { color: #D73A49; }\n  .github-plus .mtk1 { color: #24292EFF; }\n  .github-plus .mtk5 { color: #005CC5; }\n</style>","fields":{"slug":"/2018-10-28-graphql-interfaces-vs-unions/"},"frontmatter":{"title":"GraphQL Interfaces vs Unions","theme":"navy-light-red","originally_on_thread":true,"date":"28 October, 2018"}},"site":{"siteMetadata":{"title":"Dan Palmer","description":"Personal site and blog"}}},"pageContext":{"slug":"/2018-10-28-graphql-interfaces-vs-unions/"}}}